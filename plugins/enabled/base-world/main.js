'use strict';

// events
engine.on('tile-improvement-built', function(tile, improvement) {
    if (!tile.improvements.includes(improvement)) {
        tile.improvements.push(improvement);
    }
});

engine.on('tile-improvement-pillaged', function(tile, improvement) {
    if (tile.improvements.includes(improvement)) {
        tile.improvements = tile.improvements.filter(function(currentImprovement) {
            return currentImprovement !== improvement;
        });
    }
});

engine.on('tile-seen', function(tile, player) {
    tile.seenBy[player.id] = 1;
});

exnted(engine, {
    World: class World {
        constructor() {
            var map = this;

            map.terrain = [];

            map.seed = Math.ceil(Math.random() * 1e7);

            engine.plugin.get('terrain').forEach(function(terrain) {
                terrain.contents.forEach(function(file) {
                    var terrainDefinition = engine.loadJSON(file);

                    if ('image' in terrainDefinition) {
                        terrainDefinition.image = terrain.__path + terrainDefinition.image;
                    }

                    if ('adjacentImages' in terrainDefinition) {
                        Object.keys(terrainDefinition.adjacentImages).forEach(function(key) {
                            terrainDefinition.adjacentImages[key] = terrain.__path + terrainDefinition.adjacentImages[key];
                        });
                    }

                    if ('special' in terrainDefinition) {
                        terrainDefinition.special = terrainDefinition.special.map(function(special) {
                            if ('overlay' in special) {
                                special.overlay = terrain.__path + special.overlay;
                            }

                            return special;
                        });
                    }

                    map.terrain.push(terrainDefinition);
                });
            });

            map.map = map.generate().map(function(row, y) {
                return row.map(function(terrainId, x) {
                    return new World.Tile({
                        x: x,
                        y: y,
                        terrainId: terrainId,
                        terrain: map.getTerrainType(terrainId),
                        map: map
                    });
                });
            });
        }

        visibility(playerId, x, y) {
            return this.map[x][y].isVisible(playerId);
        }

        get width() {
            return this.map[0].length;
        }

        get height() {
            return this.map.length;
        }

        get(x, y, normalise) {
            // TODO: check map type
            if (x > (this.width - 1)) {
                x -= this.width;
            }
            else if (x < 0) {
                x += this.width;
            }

            if (y > (this.height - 1)) {
                y -= this.height;
            }
            else if (y < 0) {
                y += this.height;
            }

            return (this.map[y] || [])[x] || false;
        }

        getTerrainType(id) {
            return this.terrainTypes[id];
        }

        get terrainTypes() {
            return this.terrain;
        }

        generate(options) {
            // in base-terrain the following id's match:
            //    0 ocean
            //    1 grassland
            //    2 river
            //    3 plains
            //    4 desert
            //    5 forest
            //    6 jungle
            //    7 swamp
            //    8 hills
            //    9 tundra
            //    10 arctic
            //    11 mountains

            // return [
            //     [1,1,1,1,1,1,1,1],
            //     [1,1,1,1,1,1,1,1],
            //     [1,1,1,1,1,1,1,1],
            //     [1,1,1,1,1,1,1,1],
            //     [1,1,1,1,1,1,1,1]
            // ];
            // TODO
            return [
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,1,1,1,1,0,0,0,0,0,3,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,3,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,3,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,3,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,3,0,0,0,0],
                [0,1,2,2,1,1,5,1,1,1,0,0,0,3,0,0,0,1,2,2,1,1,5,1,1,1,0,0,0,3,0,0,0,1,2,2,1,1,5,1,1,1,0,0,0,3,0,0,0,1,2,2,1,1,5,1,1,1,0,0,0,3,0,0,0,1,2,2,1,1,5,1,1,1,0,0,0,3,0,0],
                [0,0,1,1,1,1,5,5,1,1,1,1,1,1,3,0,0,1,1,1,1,1,5,5,1,1,1,1,1,1,3,0,0,0,1,1,1,1,5,5,1,1,1,1,1,1,3,0,0,1,1,1,1,1,5,5,1,1,1,1,1,1,3,0,0,0,1,1,1,1,5,5,1,1,1,1,1,1,3,0],
                [1,0,1,1,1,1,1,5,1,1,1,1,3,1,0,0,1,1,1,1,1,1,1,5,1,1,1,1,3,1,0,0,1,0,1,1,1,1,1,5,1,1,1,1,3,1,0,0,1,1,1,1,1,1,1,5,1,1,1,1,3,1,0,0,1,0,1,1,1,1,1,5,1,1,1,1,3,1,0,0],
                [1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,3,3,3,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,3,3,3,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1],
                [1,1,1,1,5,0,0,0,0,0,2,1,1,3,1,1,1,1,1,1,5,1,0,0,0,0,2,1,1,0,1,1,1,1,1,1,5,0,0,0,0,0,2,1,1,3,1,1,1,1,1,1,5,1,0,0,0,0,2,1,1,0,1,1,1,1,1,1,5,0,0,0,0,0,2,1,1,3,1,1],
                [1,1,1,2,5,1,0,0,0,2,2,2,1,3,3,1,1,1,1,2,5,1,1,1,0,2,2,2,1,0,0,1,1,1,1,2,5,1,0,0,0,2,2,2,1,3,3,1,1,1,1,2,5,1,1,1,0,2,2,2,1,0,0,1,1,1,1,2,5,1,0,0,0,2,2,2,1,3,3,1],
                [0,1,1,1,5,3,3,0,0,0,2,2,2,1,1,1,1,1,1,1,5,3,3,0,0,0,2,2,2,1,0,0,0,1,1,1,5,3,3,0,0,0,2,2,2,1,1,1,1,1,1,1,5,3,3,0,0,0,2,2,2,1,0,0,0,1,1,1,5,3,3,0,0,0,2,2,2,1,1,1],
                [0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1],
                [0,1,0,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,5,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,5,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,5,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,1,1,1,1],
                [1,1,1,1,1,1,1,1,5,1,5,1,1,2,1,1,1,1,1,1,1,1,1,1,5,1,5,1,1,2,1,1,1,1,1,1,1,1,1,1,5,1,5,1,1,2,1,1,1,1,1,1,1,1,1,1,5,1,5,1,1,2,1,1,1,1,1,1,1,1,1,1,5,1,5,1,1,2,1,1],
                [0,0,1,1,1,1,1,1,1,0,0,1,1,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,2,1,1],
                [1,0,1,1,1,1,1,5,1,1,1,1,3,1,0,0,1,1,1,1,1,1,1,5,1,1,1,1,3,1,0,0,1,0,1,1,1,1,1,5,1,1,1,1,3,1,0,0,1,1,1,1,1,1,1,5,1,1,1,1,3,1,0,0,1,0,1,1,1,1,1,5,1,1,1,1,3,1,0,0],
                [0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,1,1,8,8,8,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1],
                [1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,3,3,3,1,1,1,8,8,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,3,3,3,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1],
                [1,1,1,1,5,0,0,0,0,0,2,1,1,3,1,1,1,1,1,1,5,1,8,11,8,8,2,1,1,0,1,1,1,1,1,1,5,0,0,0,0,0,2,1,1,3,1,1,1,1,1,1,5,1,0,0,0,0,2,1,1,0,1,1,1,1,1,1,5,0,0,0,0,0,2,1,1,3,1,1],
                [0,1,1,1,0,0,0,0,0,0,0,1,1,3,3,0,0,1,1,8,8,8,8,11,11,8,0,1,1,3,3,0,0,1,1,1,0,0,0,0,0,0,0,1,1,3,3,0,0,1,1,0,0,0,0,0,0,0,0,1,1,3,3,0,0,1,1,1,0,0,0,0,0,0,0,1,1,3,3,0],
                [0,0,1,1,1,1,0,0,0,0,0,3,0,0,0,0,0,0,1,1,1,1,8,11,8,8,0,3,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,3,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,3,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,3,0,0,0,0],
                [0,1,2,2,1,1,5,1,1,1,0,0,0,3,0,0,0,1,2,2,1,1,5,1,1,1,0,0,0,3,0,0,0,1,2,2,1,1,5,1,1,1,0,0,0,3,0,0,0,1,2,2,1,1,5,1,1,1,0,0,0,3,0,0,0,1,2,2,1,1,5,1,1,1,0,0,0,3,0,0],
                [0,0,1,1,1,1,5,5,1,1,1,1,1,1,3,0,0,1,1,1,1,1,5,5,1,1,1,1,1,1,3,0,0,0,1,1,1,1,5,5,1,1,1,1,1,1,3,0,0,1,1,1,1,1,5,5,1,1,1,1,1,1,3,0,0,0,1,1,1,1,5,5,1,1,1,1,1,1,3,0],
                [1,1,1,2,5,1,0,0,0,2,2,2,1,3,3,1,1,1,1,2,5,1,1,1,0,2,2,2,1,0,0,1,1,1,1,2,5,1,0,0,0,2,2,2,1,3,3,1,1,1,1,2,5,1,1,1,0,2,2,2,1,0,0,1,1,1,1,2,5,1,0,0,0,2,2,2,1,3,3,1],
                [0,1,1,1,5,3,3,0,0,0,2,2,2,1,1,1,1,1,1,1,5,3,3,0,0,0,2,2,2,1,0,0,0,1,1,1,5,3,3,0,0,0,2,2,2,1,1,1,1,1,1,1,5,3,3,0,0,0,2,2,2,1,0,0,0,1,1,1,5,3,3,0,0,0,2,2,2,1,1,1],
                [0,1,0,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,5,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,5,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,5,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,1,1,1,1],
                [1,1,1,1,1,1,1,1,5,1,5,1,1,2,1,1,1,1,1,1,1,1,1,1,5,1,5,1,1,2,1,1,1,1,1,1,1,1,1,1,5,1,5,1,1,2,1,1,1,1,1,1,1,1,1,1,5,1,5,1,1,2,1,1,1,1,1,1,1,1,1,1,5,1,5,1,1,2,1,1],
                [0,0,1,1,1,1,1,1,1,0,0,1,1,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,2,1,1],
                [1,1,1,2,5,1,0,0,0,2,2,2,1,3,3,1,1,1,1,2,5,1,1,1,0,2,2,2,1,0,0,1,1,1,1,2,5,1,0,0,0,2,2,2,1,3,3,1,1,1,1,2,5,1,1,1,0,2,2,2,1,0,0,1,1,1,1,2,5,1,0,0,0,2,2,2,1,3,3,1],
                [0,1,1,1,5,3,3,0,0,0,2,2,2,1,1,1,1,1,1,1,5,3,3,0,0,0,2,2,2,1,0,0,0,1,1,1,5,3,3,0,0,0,2,2,2,1,1,1,1,1,1,1,5,3,3,0,0,0,2,2,2,1,0,0,0,1,1,1,5,3,3,0,0,0,2,2,2,1,1,1],
                [0,1,0,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,5,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,5,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,5,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,1,1,1,1],
                [1,1,1,1,1,1,1,1,5,1,5,1,1,2,1,1,1,1,1,1,1,1,1,1,5,1,5,1,1,2,1,1,1,1,1,1,1,1,1,1,5,1,5,1,1,2,1,1,1,1,1,1,1,1,1,1,5,1,5,1,1,2,1,1,1,1,1,1,1,1,1,1,5,1,5,1,1,2,1,1],
                [0,0,1,1,1,1,0,0,0,0,0,3,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,3,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,3,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,3,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,3,0,0,0,0],
                [0,1,2,2,1,1,5,1,1,1,0,0,0,3,0,0,0,1,2,2,1,1,5,1,1,1,0,0,0,3,0,0,0,1,2,2,1,1,5,1,1,1,0,0,0,3,0,0,0,1,2,2,1,1,5,1,1,1,0,0,0,3,0,0,0,1,2,2,1,1,5,1,1,1,0,0,0,3,0,0],
                [0,0,1,1,1,1,5,5,1,1,1,1,1,1,3,0,0,1,1,1,1,1,5,5,1,1,1,1,1,1,3,0,0,0,1,1,1,1,5,5,1,1,1,1,1,1,3,0,0,1,1,1,1,1,5,5,1,1,1,1,1,1,3,0,0,0,1,1,1,1,5,5,1,1,1,1,1,1,3,0],
                [1,0,1,1,1,1,1,5,1,1,1,1,3,1,0,0,1,1,1,1,1,1,1,5,1,1,1,1,3,1,0,0,1,0,1,1,1,1,1,5,1,1,1,1,3,1,0,0,1,1,1,1,1,1,1,5,1,1,1,1,3,1,0,0,1,0,1,1,1,1,1,5,1,1,1,1,3,1,0,0],
                [1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,3,3,3,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,3,3,3,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1],
                [1,1,1,1,5,0,0,0,0,0,2,1,1,3,1,1,1,1,1,1,5,1,0,0,0,0,2,1,1,0,1,1,1,1,1,1,5,0,0,0,0,0,2,1,1,3,1,1,1,1,1,1,5,1,0,0,0,0,2,1,1,0,1,1,1,1,1,1,5,0,0,0,0,0,2,1,1,3,1,1],
                [1,1,1,2,5,1,0,0,0,2,2,2,1,3,3,1,1,1,1,2,5,1,1,1,0,2,2,2,1,0,0,1,1,1,1,2,5,1,0,0,0,2,2,2,1,3,3,1,1,1,1,2,5,1,1,1,0,2,2,2,1,0,0,1,1,1,1,2,5,1,0,0,0,2,2,2,1,3,3,1],
                [0,1,1,1,5,3,3,0,0,0,2,2,2,1,1,1,1,1,1,1,5,3,3,0,0,0,2,2,2,1,0,0,0,1,1,1,5,3,3,0,0,0,2,2,2,1,1,1,1,1,1,1,5,3,3,0,0,0,2,2,2,1,0,0,0,1,1,1,5,3,3,0,0,0,2,2,2,1,1,1],
                [0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1],
                [0,1,0,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,5,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,5,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,5,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,1,1,1,1],
                [1,1,1,1,1,1,1,1,5,1,5,1,1,2,1,1,1,1,1,1,1,1,1,1,5,1,5,1,1,2,1,1,1,1,1,1,1,1,1,1,5,1,5,1,1,2,1,1,1,1,1,1,1,1,1,1,5,1,5,1,1,2,1,1,1,1,1,1,1,1,1,1,5,1,5,1,1,2,1,1],
                [0,0,1,1,1,1,1,1,1,0,0,1,1,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,2,1,1],
                [1,0,1,1,1,1,1,5,1,1,1,1,3,1,0,0,1,1,1,1,1,1,1,5,1,1,1,1,3,1,0,0,1,0,1,1,1,1,1,5,1,1,1,1,3,1,0,0,1,1,1,1,1,1,1,5,1,1,1,1,3,1,0,0,1,0,1,1,1,1,1,5,1,1,1,1,3,1,0,0],
                [0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1],
                [0,1,1,1,0,0,0,0,0,0,0,1,1,3,3,0,0,1,1,0,0,0,0,0,0,0,0,1,1,3,3,0,0,1,1,1,0,0,0,0,0,0,0,1,1,3,3,0,0,1,1,0,0,0,0,0,0,0,0,1,1,3,3,0,0,1,1,1,0,0,0,0,0,0,0,1,1,3,3,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
            ];
        }

        load() {
            // TODO
        }
    }
});

extend(engine.World, {
    Tile: class Tile {
        constructor(details) {
            var tile = this;

            extend(tile, details);

            // keep this as its own instance
            tile.terrain = extend({}, tile.terrain);

            if (!(tile.map instanceof engine.World)) {
                throw "Invalid Tile definition.";
            }

            tile.improvements = [];
            tile.city = false;
            tile.units = [];
            tile.seenBy = {};

            tile.seed = Math.ceil(Math.random() * 1e7);

            if ('special' in tile.terrain && Array.isArray(tile.terrain.special)) {
                tile.terrain.special.forEach(function(special) {
                    if (Array.isArray(tile.terrain.special)) {
                        if ((tile.seed + tile.map.seed * ((tile.x + 1) + (tile.y + 1))) % 100 < special.chance) {
                            tile.terrain.special = special;

                            return false; // TODO: check this breaks out early...
                        }
                    }
                });
            }

            if (Array.isArray(tile.terrain.special)) {
                tile.terrain.special = false;
            }
        }

        get neighbours() {
            return {
                n: this.map.get(this.x, this.y - 1),
                ne: this.map.get(this.x + 1, this.y - 1),
                e: this.map.get(this.x + 1, this.y),
                se: this.map.get(this.x + 1, this.y + 1),
                s: this.map.get(this.x, this.y + 1),
                sw: this.map.get(this.x - 1, this.y + 1),
                w: this.map.get(this.x - 1, this.y),
                nw: this.map.get(this.x - 1, this.y - 1)
            };
        }

        get adjacent() {
            return {
                n: this.map.get(this.x, this.y - 1),
                e: this.map.get(this.x + 1, this.y),
                w: this.map.get(this.x - 1, this.y),
                s: this.map.get(this.x, this.y + 1)
            };
        }

        // this is used to help with rendering contiguous terrain types
        get adjacentTerrain() {
            var tile = this,
            adjacent = tile.adjacent,
            result = '';

            return ['n', 'e', 's', 'w'].filter(function(position) {
                return (adjacent[position].terrainId === tile.terrainId);
            }).join('');
        }

        get isOcean() {
            return this.terrain.ocean;
        }

        get isCoast() {
            var tile = this;

            return tile.isOcean &&
                Object.keys(tile.neighbours).map(function(direction) {
                    return tile.neighbours[direction].isLand
                }).some(function(value) {
                    return value === true;
                });
        }

        get coast() {
            var tile = this;

            return Object.keys(this.neighbours).filter(function(direction) {
                return tile.neighbours[direction].isLand;
            });
        }

        get isLand() {
            return this.terrain.land;
        }

        isVisible(playerId) {
            return this.seenBy[playerId];
        }

        resource(type) {
            var tile = this;

            if ((typeof tile.terrain[type] === 'function')) {
                tile.terrain[type] = tile.terrain[type](tile.map, tile.x, tile.y);
            }

            return (this.terrain[type] + tile.improvements.map(function(improvement) {
                return (tile.terrain.improvements[improvement] || {})[type] || 0;
            }).reduce(function(total, value) {
                return total + value;
            }, 0)) || 0;
        }

        get trade() {
            return this.resource('trade');
        }

        get food() {
            return this.resource('food');
        }

        get production() {
            return this.resource('production');
        }

        movementCost(to) {
            // TODO: these defined separately, improvement plugins?
            if (this.improvements.includes('railroad') && to.improvements.includes('railroad')) {
                // TODO: unless goto...
                return 0;
            }
            else if (this.improvements.includes('road') && to.improvements.includes('road')) {
                return 1 / 3;
            }
            else {
                return to.terrain.movementCost;
            }
        }
    }
});
