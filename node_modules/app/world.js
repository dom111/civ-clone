'use strict';

const extend = require('extend');

// events
game.on('tile-improvement-built', function(tile, improvement) {
    if (!tile.improvements.includes(improvement)) {
        tile.improvements.push(improvement);
    }
});

game.on('tile-improvement-pillaged', function(tile, improvement) {
    if (tile.improvements.includes(improvement)) {
        tile.improvements = tile.improvements.filter(function(currentImprovement) {
            return currentImprovement !== improvement;
        });
    }
});


module.exports = (function() {
    var Tile = class Tile {
        constructor(details) {
            var tile = this;

            extend(tile, details);

            // keep this as its own instance
            tile.terrain = extend({}, tile.terrain);

            if (!(tile.map instanceof World)) {
                throw "Invalid Tile definition.";
            }

            tile.improvements = [];
            tile.city = false;
            tile.units = [];

            tile.seed = Math.ceil(Math.random() * 1e7);

            if ('special' in tile.terrain) {
                tile.terrain.special.forEach(function(special) {
                    if (tile.special !== true) {
                        if ((tile.seed + tile.map.seed * ((tile.x + 1) + (tile.y + 1))) % 100 < special.chance) {
                            tile.terrain = extend(tile.terrain, special);
                            tile.terrain.special = true;

                            return false; // TODO: check this breaks out early...
                        }
                    }
                });
            }

            if (tile.terrain.special !== true) {
                tile.terrain.special = false;
            }
        }

        get neighbours() {
            return {
                n: this.map.get(this.x, this.y - 1),
                ne: this.map.get(this.x + 1, this.y - 1),
                e: this.map.get(this.x + 1, this.y),
                se: this.map.get(this.x + 1, this.y + 1),
                s: this.map.get(this.x, this.y + 1),
                sw: this.map.get(this.x - 1, this.y + 1),
                w: this.map.get(this.x - 1, this.y),
                nw: this.map.get(this.x - 1, this.y - 1)
            };
        }

        get adjacent() {
            return {
                n: this.map.get(this.x, this.y - 1),
                e: this.map.get(this.x + 1, this.y),
                w: this.map.get(this.x - 1, this.y),
                s: this.map.get(this.x, this.y + 1)
            };
        }

        get adjacentTerrain() {
            var tile = this,
            adjacent = tile.adjacent,
            result = '';

            return ['n', 'e', 's', 'w'].filter(function(position) {
                return (adjacent[position].terrainId === tile.terrainId);
            }).join('');
        }

        isOceam() {
            return (this.terrainId === 0);
        }

        isCoast() {
            return this.isOcean() &&
                // cost is a tile that is ocean with land to the north, south, east or west, diagonals don't affect the coastal status
                ['n', 'e', 's', 'w'].map(function(direction) {
                // if we do need to check all, we could do:
                // Object.keys(this.neighbours).map(function(direction) {
                    return this.neighbours[direction].isLand()
                }).some(function(value) {
                    return value === true;
                });
        }

        isLand() {
            return (this.terrainId > 0)
        }

        resource(type) {
            var tile = this;

            if ((typeof tile.terrain[type] === 'function')) {
                tile.terrain[type] = tile.terrain[type](tile.map, tile.x, tile.y);
            }

            return (this.terrain[type] + tile.improvements.map(function(improvement) {
                return (tile.terrain.improvements[improvement] || {})[type] || 0;
            }).reduce(function(total, value) {
                return total + value;
            }, 0)) || 0;
        }

        get trade() {
            return this.resource('trade');
        }

        get food() {
            return this.resource('food');
        }

        get production() {
            return this.resource('production');
        }
    };

    var World = class World {
        constructor() {
            var map = this;

            map.terrain = [];

            map.seed = Math.ceil(Math.random() * 1e7);

            game.plugin.get('terrain').forEach(function(terrain) {
                terrain.contents.forEach(function(file) {
                    var terrainDefinition = game.loadJSON(file);

                    if ('image' in terrainDefinition) {
                        terrainDefinition.image = terrain.__path + terrainDefinition.image;
                    }

                    if ('adjacentImages' in terrainDefinition) {
                        Object.keys(terrainDefinition.adjacentImages).forEach(function(key) {
                            terrainDefinition.adjacentImages[key] = terrain.__path + terrainDefinition.adjacentImages[key];
                        });
                    }

                    if ('special' in terrainDefinition) {
                        terrainDefinition.special = terrainDefinition.special.map(function(special) {
                            if ('overlay' in special) {
                                special.overlay = terrain.__path + special.overlay;
                            }

                            return special;
                        });
                    }

                    map.terrain.push(terrainDefinition);
                });
            });

            map.map = map.generate().map(function(row, x) {
                return row.map(function(terrainId, y) {
                    return new Tile({
                        x: x,
                        y: y,
                        terrainId: terrainId,
                        terrain: map.getTerrainType(terrainId),
                        map: map
                    });
                });
            });
        }

        get(x, y) {
            if (x > (this.map.length - 1)) {
                x -= this.map.length;
            }
            else if (x < 0) {
                x += this.map.length;
            }

            if (y > (this.map.length - 1)) {
                y -= this.map.length;
            }
            else if (y < 0) {
                y += this.map.length;
            }

            return (this.map[x] || [])[y] || false;
        }

        getTerrainType(id) {
            return this.terrain[id];
        }

        getTerrainTypes() {
            return this.terrain;
        }

        generate(options) {
            // TODO
            return [
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,1,1,1,1,0,0,0,0,0,3,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,3,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,3,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,3,0,0,0,0],
                [0,1,2,2,1,1,4,1,1,1,0,0,0,3,0,0,0,1,2,2,1,1,4,1,1,1,0,0,0,3,0,0,0,1,2,2,1,1,4,1,1,1,0,0,0,3,0,0,0,1,2,2,1,1,4,1,1,1,0,0,0,3,0,0],
                [0,0,1,1,1,1,4,4,1,1,1,1,1,1,3,0,0,1,1,1,1,1,4,4,1,1,1,1,1,1,3,0,0,0,1,1,1,1,4,4,1,1,1,1,1,1,3,0,0,1,1,1,1,1,4,4,1,1,1,1,1,1,3,0],
                [1,0,1,1,1,1,1,4,1,1,1,1,3,1,0,0,1,1,1,1,1,1,1,4,1,1,1,1,3,1,0,0,1,0,1,1,1,1,1,4,1,1,1,1,3,1,0,0,1,1,1,1,1,1,1,4,1,1,1,1,3,1,0,0],
                [1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,3,3,3,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,3,3,3,1,1,1,0,0,1,1,1,0,0,1],
                [1,1,1,1,4,0,0,0,0,0,2,1,1,3,1,1,1,1,1,1,4,1,0,0,0,0,2,1,1,0,1,1,1,1,1,1,4,0,0,0,0,0,2,1,1,3,1,1,1,1,1,1,4,1,0,0,0,0,2,1,1,0,1,1],
                [1,1,1,2,4,1,0,0,0,2,2,2,1,3,3,1,1,1,1,2,4,1,1,1,0,2,2,2,1,0,0,1,1,1,1,2,4,1,0,0,0,2,2,2,1,3,3,1,1,1,1,2,4,1,1,1,0,2,2,2,1,0,0,1],
                [0,1,1,1,4,3,3,0,0,0,2,2,2,1,1,1,1,1,1,1,4,3,3,0,0,0,2,2,2,1,0,0,0,1,1,1,4,3,3,0,0,0,2,2,2,1,1,1,1,1,1,1,4,3,3,0,0,0,2,2,2,1,0,0],
                [0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,1,1,0,0,0,1,1,1,1,1,0],
                [0,1,0,1,1,1,1,1,1,4,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,4,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,4,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,4,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,1,1,1,1],
                [1,1,1,1,1,1,1,1,4,1,4,1,1,2,1,1,1,1,1,1,1,1,1,1,4,1,4,1,1,2,1,1,1,1,1,1,1,1,1,1,4,1,4,1,1,2,1,1,1,1,1,1,1,1,1,1,4,1,4,1,1,2,1,1],
                [0,0,1,1,1,1,1,1,1,0,0,1,1,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,1],
                [1,0,1,1,1,1,1,4,1,1,1,1,3,1,0,0,1,1,1,1,1,1,1,4,1,1,1,1,3,1,0,0,1,0,1,1,1,1,1,4,1,1,1,1,3,1,0,0,1,1,1,1,1,1,1,4,1,1,1,1,3,1,0,0],
                [0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,1,1,0,0,0,1,1,1,1,1,0],
                [1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,3,3,3,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,3,3,3,1,1,1,0,0,1,1,1,0,0,1],
                [1,1,1,1,4,0,0,0,0,0,2,1,1,3,1,1,1,1,1,1,4,1,0,0,0,0,2,1,1,0,1,1,1,1,1,1,4,0,0,0,0,0,2,1,1,3,1,1,1,1,1,1,4,1,0,0,0,0,2,1,1,0,1,1],
                [0,1,1,1,0,0,0,0,0,0,0,1,1,3,3,0,0,1,1,0,0,0,0,0,0,0,0,1,1,3,3,0,0,1,1,1,0,0,0,0,0,0,0,1,1,3,3,0,0,1,1,0,0,0,0,0,0,0,0,1,1,3,3,0],
                [0,0,1,1,1,1,0,0,0,0,0,3,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,3,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,3,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,3,0,0,0,0],
                [0,1,2,2,1,1,4,1,1,1,0,0,0,3,0,0,0,1,2,2,1,1,4,1,1,1,0,0,0,3,0,0,0,1,2,2,1,1,4,1,1,1,0,0,0,3,0,0,0,1,2,2,1,1,4,1,1,1,0,0,0,3,0,0],
                [0,0,1,1,1,1,4,4,1,1,1,1,1,1,3,0,0,1,1,1,1,1,4,4,1,1,1,1,1,1,3,0,0,0,1,1,1,1,4,4,1,1,1,1,1,1,3,0,0,1,1,1,1,1,4,4,1,1,1,1,1,1,3,0],
                [1,1,1,2,4,1,0,0,0,2,2,2,1,3,3,1,1,1,1,2,4,1,1,1,0,2,2,2,1,0,0,1,1,1,1,2,4,1,0,0,0,2,2,2,1,3,3,1,1,1,1,2,4,1,1,1,0,2,2,2,1,0,0,1],
                [0,1,1,1,4,3,3,0,0,0,2,2,2,1,1,1,1,1,1,1,4,3,3,0,0,0,2,2,2,1,0,0,0,1,1,1,4,3,3,0,0,0,2,2,2,1,1,1,1,1,1,1,4,3,3,0,0,0,2,2,2,1,0,0],
                [0,1,0,1,1,1,1,1,1,4,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,4,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,4,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,4,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,1,1,1,1],
                [1,1,1,1,1,1,1,1,4,1,4,1,1,2,1,1,1,1,1,1,1,1,1,1,4,1,4,1,1,2,1,1,1,1,1,1,1,1,1,1,4,1,4,1,1,2,1,1,1,1,1,1,1,1,1,1,4,1,4,1,1,2,1,1],
                [0,0,1,1,1,1,1,1,1,0,0,1,1,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,1],
                [0,1,1,1,0,0,0,0,0,0,0,1,1,3,3,0,0,1,1,0,0,0,0,0,0,0,0,1,1,3,3,0,0,1,1,1,0,0,0,0,0,0,0,1,1,3,3,0,0,1,1,0,0,0,0,0,0,0,0,1,1,3,3,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,1,1,1,1,0,0,0,0,0,3,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,3,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,3,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,3,0,0,0,0],
                [0,1,2,2,1,1,4,1,1,1,0,0,0,3,0,0,0,1,2,2,1,1,4,1,1,1,0,0,0,3,0,0,0,1,2,2,1,1,4,1,1,1,0,0,0,3,0,0,0,1,2,2,1,1,4,1,1,1,0,0,0,3,0,0],
                [0,0,1,1,1,1,4,4,1,1,1,1,1,1,3,0,0,1,1,1,1,1,4,4,1,1,1,1,1,1,3,0,0,0,1,1,1,1,4,4,1,1,1,1,1,1,3,0,0,1,1,1,1,1,4,4,1,1,1,1,1,1,3,0],
                [1,0,1,1,1,1,1,4,1,1,1,1,3,1,0,0,1,1,1,1,1,1,1,4,1,1,1,1,3,1,0,0,1,0,1,1,1,1,1,4,1,1,1,1,3,1,0,0,1,1,1,1,1,1,1,4,1,1,1,1,3,1,0,0],
                [1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,3,3,3,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,3,3,3,1,1,1,0,0,1,1,1,0,0,1],
                [1,1,1,1,4,0,0,0,0,0,2,1,1,3,1,1,1,1,1,1,4,1,0,0,0,0,2,1,1,0,1,1,1,1,1,1,4,0,0,0,0,0,2,1,1,3,1,1,1,1,1,1,4,1,0,0,0,0,2,1,1,0,1,1],
                [1,1,1,2,4,1,0,0,0,2,2,2,1,3,3,1,1,1,1,2,4,1,1,1,0,2,2,2,1,0,0,1,1,1,1,2,4,1,0,0,0,2,2,2,1,3,3,1,1,1,1,2,4,1,1,1,0,2,2,2,1,0,0,1],
                [0,1,1,1,4,3,3,0,0,0,2,2,2,1,1,1,1,1,1,1,4,3,3,0,0,0,2,2,2,1,0,0,0,1,1,1,4,3,3,0,0,0,2,2,2,1,1,1,1,1,1,1,4,3,3,0,0,0,2,2,2,1,0,0],
                [0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,1,1,0,0,0,1,1,1,1,1,0],
                [0,1,0,1,1,1,1,1,1,4,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,4,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,4,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,4,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,1,1,1,1],
                [1,1,1,1,1,1,1,1,4,1,4,1,1,2,1,1,1,1,1,1,1,1,1,1,4,1,4,1,1,2,1,1,1,1,1,1,1,1,1,1,4,1,4,1,1,2,1,1,1,1,1,1,1,1,1,1,4,1,4,1,1,2,1,1],
                [0,0,1,1,1,1,1,1,1,0,0,1,1,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,1],
                [1,0,1,1,1,1,1,4,1,1,1,1,3,1,0,0,1,1,1,1,1,1,1,4,1,1,1,1,3,1,0,0,1,0,1,1,1,1,1,4,1,1,1,1,3,1,0,0,1,1,1,1,1,1,1,4,1,1,1,1,3,1,0,0],
                [0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,1,1,0,0,0,1,1,1,1,1,0],
                [1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,3,3,3,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,3,3,3,1,1,1,0,0,1,1,1,0,0,1],
                [1,1,1,1,4,0,0,0,0,0,2,1,1,3,1,1,1,1,1,1,4,1,0,0,0,0,2,1,1,0,1,1,1,1,1,1,4,0,0,0,0,0,2,1,1,3,1,1,1,1,1,1,4,1,0,0,0,0,2,1,1,0,1,1],
                [0,1,1,1,0,0,0,0,0,0,0,1,1,3,3,0,0,1,1,0,0,0,0,0,0,0,0,1,1,3,3,0,0,1,1,1,0,0,0,0,0,0,0,1,1,3,3,0,0,1,1,0,0,0,0,0,0,0,0,1,1,3,3,0],
                [0,0,1,1,1,1,0,0,0,0,0,3,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,3,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,3,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,3,0,0,0,0],
                [0,1,2,2,1,1,4,1,1,1,0,0,0,3,0,0,0,1,2,2,1,1,4,1,1,1,0,0,0,3,0,0,0,1,2,2,1,1,4,1,1,1,0,0,0,3,0,0,0,1,2,2,1,1,4,1,1,1,0,0,0,3,0,0],
                [0,0,1,1,1,1,4,4,1,1,1,1,1,1,3,0,0,1,1,1,1,1,4,4,1,1,1,1,1,1,3,0,0,0,1,1,1,1,4,4,1,1,1,1,1,1,3,0,0,1,1,1,1,1,4,4,1,1,1,1,1,1,3,0],
                [1,1,1,2,4,1,0,0,0,2,2,2,1,3,3,1,1,1,1,2,4,1,1,1,0,2,2,2,1,0,0,1,1,1,1,2,4,1,0,0,0,2,2,2,1,3,3,1,1,1,1,2,4,1,1,1,0,2,2,2,1,0,0,1],
                [0,1,1,1,4,3,3,0,0,0,2,2,2,1,1,1,1,1,1,1,4,3,3,0,0,0,2,2,2,1,0,0,0,1,1,1,4,3,3,0,0,0,2,2,2,1,1,1,1,1,1,1,4,3,3,0,0,0,2,2,2,1,0,0],
                [0,1,0,1,1,1,1,1,1,4,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,4,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,4,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,4,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,1,1,1,1],
                [1,1,1,1,1,1,1,1,4,1,4,1,1,2,1,1,1,1,1,1,1,1,1,1,4,1,4,1,1,2,1,1,1,1,1,1,1,1,1,1,4,1,4,1,1,2,1,1,1,1,1,1,1,1,1,1,4,1,4,1,1,2,1,1],
                [0,0,1,1,1,1,1,1,1,0,0,1,1,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,1],
                [0,1,1,1,0,0,0,0,0,0,0,1,1,3,3,0,0,1,1,0,0,0,0,0,0,0,0,1,1,3,3,0,0,1,1,1,0,0,0,0,0,0,0,1,1,3,3,0,0,1,1,0,0,0,0,0,0,0,0,1,1,3,3,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
            ];
        }

        load() {
            // TODO
        }
    };

    return World;
})();

