'use strict';

const EventEmitter = require('events');
const util = require('util');
const extend = require('extend');

module.exports = (function() {
    var City = class City {
        constructor(details) {
            EventEmitter.call(this);

            var city = this;
            extend(this, details || {});

            city.player = game.players[0]; // TODO
            city.capital = (city.player.cities.length === 0);
            city.destroyed = false;
            city.size = 1;
            city.rates = {};

            city.player.cities.push(city);

            game.emit('city-created', city);

            city.on('captured', function(player) {
                var capturedCity = this;

                city.player.cities = this.player.cities.filter(function(city) {
                    return (city !== capturedCity)
                });
                city.player = player;
                player.cities.push(this);
            });

            city.on('destroyed', function(player) {
                city.destroyed = true;

                if (!city.player.cities.map(function(city) {
                    return city.destroyed;
                }).some(function(value) {
                    return value === true;
                })) {
                    // TODO: all cities destroyed
                }

                // TODO: remove from map
            });

            // main city tile, always worked
            city.tile = game.map.get(this.x, this.y);
            city.tiles = [
                game.map.get(this.x, this.y - 1),
                game.map.get(this.x - 1, this.y),
                game.map.get(this.x, this.y + 1),
                game.map.get(this.x + 1, this.y),
                game.map.get(this.x + 1, this.y - 1),
                game.map.get(this.x + 1, this.y + 1),
                game.map.get(this.x - 1, this.y + 1),
                game.map.get(this.x - 1, this.y - 1),
                game.map.get(this.x, this.y - 2),
                game.map.get(this.x + 2, this.y),
                game.map.get(this.x, this.y + 2),
                game.map.get(this.x - 2, this.y),
                game.map.get(this.x + 1, this.y - 2),
                game.map.get(this.x + 2, this.y - 1),
                game.map.get(this.x + 2, this.y + 1),
                game.map.get(this.x + 1, this.y + 2),
                game.map.get(this.x - 1, this.y + 2),
                game.map.get(this.x - 2, this.y + 1),
                game.map.get(this.x - 2, this.y - 1),
                game.map.get(this.x - 1, this.y - 2)
            ];

            city.tile.emit('improvement-built', 'irrigation');
            city.tile.emit('improvement-built', 'road');

            city.tilesWorked = city.tiles.map(function(square, id) {
                return {
                    // TODO
                    weight: (
                        (square.food * 8) +
                        (square.production * 4) +
                        (square.trade * 2)
                    ),
                    id: id
                }
            }).sort(function(a, b) {
                return (a.weight > b.weight) ?
                    -1 :
                    (a.weight === b.weight) ?
                        0 :
                        1
            }).map(function(tile) {
                return tile.id;
            }).slice(0, this.size);

            city.on('grow', city.calculateRates);
            city.on('shrink', city.calculateRates);
            city.player.on('rate-change', city.calculateRates);
        }

        calculateRates() {
            var city = this,
            trade = Array(this.trade).fill(1);

            game.availableTradeRates.forEach(function(rate) {
                city.rates[rate] = trade.splice(0, Math.ceil(city.player.getRate(rate) * trade.length)).reduce(function(total, value) {
                    return total + value;
                }, 0);
            });
        }

        resource(type) {
            var city = this;

            return city.tile[type] + city.tilesWorked.map(function(tileId) {
                return city.tiles[tileId][type];
            }).reduce(function(total, value) {
                return total + value;
            });
        }

        get trade() {
            return this.resource('trade');
        }

        get food() {
            return this.resource('food');
        }

        get production() {
            return this.resource('production');
        }
    };

    util.inherits(City, EventEmitter);

    return City;
})();

