'use strict';

// external objects
const EventEmitter = require('events');
const util = require('util');
const electron = require('electron');
const ipc = electron.ipcRenderer;
const extend = require('extend');
const mustache = require('mustache');
const fs = require('fs');
const vm = require('vm');

// local settings
var paths = {};
var settings = {};

module.exports = (function() {
    var Game = class Game {
        constructor() {
            EventEmitter.call(this);

            this.availableTradeRates = [];

            // set up useful paths
            this.path('base', `${__dirname}/../../`);
            this.path('views', this.path('base') + 'views/');
            this.path('plugins', this.path('base') + 'plugins/');
            this.path('enabledPlugins', this.path('plugins') + 'enabled/');
            this.path('settingsFile', this.path('userData') + '/settings.json');

            // load Settings
            extend(settings, this.loadJSON(this.path('settingsFile')) || {});

            // get or set default locale to load correct language
            // TODO: this will load no text in most locales, need to set a default?
            this.setting('locale', ipc.sendSync('app.getLocale'));

            this.plugin.load(this);
        }

        // wrapper to alo
        path(name, path) {
            if (path) {
                paths[name] = path;
            }

            return (name in paths) ? paths[name] : ipc.sendSync('app.getPath', name);
        }

        // key properties
        // main modules
        get world() {
            return require('app/world');
        }

        get plugin() {
            return require('app/plugin');
        }

        get city() {
            return require('app/city');
        }

        get notifications() {
            return require('app/notifications');
        }

        get unit() {
            return require('app/unit');
        }

        player(options) {
            var Player = require('app/player');
            return new Player(options);
        }

        // helper methods
        translation(key) {
            return require('app/translation').get(key);
        }

        get translations() {
            return require('app/translation').getAll();
        }

        setting(key, value) {
            return settings[key] || (value ? this.setSetting(key, value) : value);
        }

        get isTurnEnd() {
            return game.currentPlayer.actionsLeft === 0;
        }

        setSetting(key, value) {
            if (settings[key] !== value) {
                settings[key] = value;

                this.saveJSON(this.path('settingsFile'), settings)
            }

            return settings[key];
        }

        loadPlugins() {
            var game = this;

            game.context = extend({}, global, {
                fs: fs, // TODO: sandboxed FS
                extend: extend,
                require: function() {
                    throw 'require() is disabled for security reasons.';
                },
                addEventListener: function(event, method) {
                    // TODO: I'm clearly not supposed to do this...
                    return global.addEventListener(event, method);
                },
                setInterval: function(code, delay) {
                    // TODO: I'm clearly not supposed to do this...
                    return global.setInterval(code, delay);
                },
                console: console,
                global: global,
                // allows plugins to use these as if they already exist in scope
                City: game.city,
                Notifications: game.notifications,
                game: game,
                Player: require('app/player'),
                Plugin: game.plugin,
                Translation: require('app/translation'),
                Unit: game.unit,
                World: game.world
            });

            game.plugin.get('game-modifier').forEach(function(plugin) {
                (plugin.contents || []).forEach(function(component) {
                    var code = fs.readFileSync(component);
                    vm.runInContext(code, vm.createContext(extend({
                        plugin: plugin,
                        component: component
                    }, game.context, plugin, component)), 'file://' + component);
                });
            });
        }

        start(options) {
            var game = this;

            game.defaultOptions = {
                // TODO
                players: 1,
                difficulty: 1,
                endOfTurn: false
            };

            game.options = extend(game.defaultOptions, options);
            game.players = [];
            game.map = new game.world();

            game.on('start', function() {
                game.emit('turn-start');
            });

            game.on('turn-start', function() {
                game.notifications.check();
            });

            game.on('turn-end', function() {
                // TODO: more calculations?
                game.emit('turn-start');
            });

            game.on('turn-over', function() {
                if (this.options.endOfTurn) {
                    console.log('End turn');
                }
                else {
                    if (game.isTurnEnd) {
                        game.emit('turn-end');
                    }
                    else {
                        console.log('No auto end-turn because there are actions left: ' + game.currentPlayer.actionsLeft);
                    }
                }
            });

            // game.addPlayers(); // TODO
            for (var i = 0; i < game.options.players; i++) {
                game.players.push(game.player({
                    leader: 'Frederik',
                    people: 'German',
                    nation: 'Germany',
                    colors: ['#7B8FFF', '#334FB3']
                }));
                // game.players.push(game.player({
                //     leader: 'Frederik',
                //     people: 'Babylonian',
                //     nation: 'Babylon',
                //     colors: ['#63E367', '#2F7B00']
                // }));
                // game.players.push(game.player({
                //     leader: 'Elizabeth I',
                //     people: 'English',
                //     nation: 'England',
                //     colors: ['#fd5dfc', '#832317']
                // }));
            }

            // TODO: this is testing data
            game.currentPlayer = game.players[0];

            // new game.unit({
            //     unit: 'settler',
            //     tile: game.map.get(3, 3),
            //     player: game.currentPlayer
            // });
            // new game.unit({
            //     unit: 'settler',
            //     tile: game.map.get(3, 3),
            //     player: game.currentPlayer
            // });
            new game.unit({
                unit: 'cavalry',
                tile: game.map.get(3, 3),
                player: game.currentPlayer
            });

            game.emit('start');

            game.started = true;
        }

        loadJSON(file) {
            file = (file.substr(0, 1) === '/') ? file : this.path('base') + file;

            try {
                fs.accessSync(file);
                return JSON.parse(fs.readFileSync(file));
            }
            catch (e) {
                console.error(`Error loading '${file}': ${e}`);
            }
        }

        saveJSON(file, data) {
            file = (file.substr(0, 1) === '/') ? file : this.path('base') + file;

            return fs.writeFileSync(file, JSON.stringify(data), 'utf8');
        }

        getTemplate(template, callback) {
            var file = this.path('views') + template;
            try {
                fs.accessSync(file);
                return fs.readFileSync(file, 'utf8');
            }
            catch (e) {
                console.error(`Error loading '${this.path('views')}${template}': ${e}`);
            }
        }

        template(template) {
            return mustache.render(this.getTemplate(template), {
                translations: this.translations
            });
        }
    }

    util.inherits(Game, EventEmitter);

    return Game;
})();
