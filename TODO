# TODO

- [x] Remove electron requirement.
- [x] Add ESlint
- [x] Separate renderer logic from data and models.
- [x] Switch plugins to being ES modules.
- [x] Re-do plugin system to remove 'priority' and rely on dependencies directly.
- [x] Get AI players to move units.
- [x] Convert all raw data files to JS classes.
- [x] Re-do world generation.
- [X] Remove reliance on augmenting Engine directly.
- [X] Work on city build list.
- [X] Combat.
- [X] When building World, ensure there are enough starting squares.
- [X] Add user-definable rulesets.
- [X] Non-human players.
- [X] Write tests.
- [X] Fix map tiling.
- [X] City Improvements/Wonders.
- [X] Control city improvement costs via `Rule`s.
- [X] Control unit base stats via `Rule`s.
- [X] Fix AI bug with NavalTransports.
- [X] More civilizations.
- [X] Reorganise all existing plugins to extract self-contained entities (perhaps so they they are testable?)
- [X] Fix AI bug where they always trend north-east. Maybe this is just masked - but seems less problematic.
- [X] Add science.
- [X] Add 'trade' tile yield.
- [X] Break all plugins into `core` (parent classes/interfaces/rules) and `base` (implementations).
- [X] Change terrain specials to be augments instead of specific terrain types - this would allow rivers as they are in Civ 2+
- [X] Governments.
- [X] Replace all unit stats (and maybe costs etc) with `Yield`s
- [X] Add trade rates to control how much of a city's yield is tax/science/etc
- [X] Convert science to trade rate
- [X] Add tax trade rate
- [-] Look at the benefit of creating a single entity registry with helper methods like `.is(...)`. - `const [entity] = Registry.getBy(...)` is sufficient for this.
- [X] Obseletion mechanism (primarily units, but potentially anything...) - Covered by research with an extra criteria check.
- [X] Add `Modifier`s to `Yield`s with either a priority field, or a `Queue` of some sort.
- [X] Add Science and Gold multipliers (Library, Marketplace, etc)
- [X] Add maintenance costs
- [X] Re-do tile yields to calculate `Gold`/`Science` immediately, rather than via events.
- [X] Add luxuries trade rate
- [X] City Happiness.
- [X] Convert terrain improvements `availableOn` into `Rule`s.
- [X] Write more tests.
- [X] Replace `Tile#improvements` with `Registry`.
- [ ] Abstract World class to allow implementation of hexes rather than squares and other world generators.
- [ ] Ensure Engine is passed to plugins in read-only mode, but expose events system.
- [ ] Convert to TypeScript?
- [ ] Renderer interface - I imagine this to be a separate application that has this repo as a dependency.
- [ ] Break the engine into it's own `core-engine` repo.
- [ ] Input management (keyboard/mouse) - tied to renderer?
- [ ] i18n/l10n.
- [ ] Remote network players.
- [ ] Even more civilizations.
- [ ] Difficulties.
- [ ] Add optional dependencies to plugins.
- [ ] Add `PlayerMap` classes that only see what the Player has discovered.
- [ ] Human players - this is likely dependent on a renderer, although perhaps make it playable within a TTY?
- [ ] Write more tests.
- [ ] Feature parity with Civilization.
- [ ] Add pathing mechanisms (A*?)
- [ ] Add more units.
- [ ] Add more city improvements.
- [ ] Add wonders.
- [ ] Add wealth.
- [ ] Add build-queue.
- [ ] Add Barbarians.
- [ ] Replace the rest of the `.improvements`, `.features` with `Registry` pattern
- [ ] Look at modular AI info for plugin Unit providing data/weightings on what to do with the unit?
- [ ] Add starter technologies - need to read why Civ allocates these and set up `Rules` within `base-science`.
- [ ] Consider `PlayerActionRegistry` returning a `PlayerAction` entity that can be processed or dismissed. Sub-class with `Mandatory`... and `Optional`... `PlayerAction`s which can be optionally skipped in the `Player#takeTurn` loop.
- [ ] Add goody huts
- [ ] Consider building a 'compiler' that can build a static version of the game including all rules that would run better and consider the current state as 'dev' mode.
- [ ] Add version checking to plugin system.
- [ ] Add diplomacy
- [ ] Add leader traits
- [ ] Modify AI to adjust trade rates
- [ ] Move `buildProgress` and the entire `build` mechanism into a value object instead of a property.
- [ ] Move `foodStorage` into a value object instead of a property.
